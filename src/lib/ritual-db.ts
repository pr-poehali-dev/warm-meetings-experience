import { RitualConfig, RitualBooking } from './ritual-api';

const mockConfig: RitualConfig = {
  formats: [
    { id: 1, name: '–†–∏—Ç—É–∞–ª ¬´–ë–ª–∏–∂–µ¬ª', description: '2 —á–∞—Å–∞', duration_hours: 2.0, base_price: 12000, is_active: true, sort_order: 1 },
    { id: 2, name: '–¢–µ–ø–ª–æ –≤ —Ç–∏—à–∏–Ω–µ', description: '2 —á–∞—Å–∞', duration_hours: 2.0, base_price: 15000, is_active: true, sort_order: 2 },
    { id: 3, name: '–ü–∞—Ä–Ω—ã–π —Ä–∏—Ç—É–∞–ª –æ–±—É—á–µ–Ω–∏—è –ø–∞—Ä–µ–Ω–∏—é', description: '2.5 —á–∞—Å–∞', duration_hours: 2.5, base_price: 18000, is_active: true, sort_order: 3 },
    { id: 4, name: '–°–≤–∏–¥–∞–Ω–∏–µ —Å —É–∂–∏–Ω–æ–º –∏ —á–∞–µ–º', description: '3 —á–∞—Å–∞', duration_hours: 3.0, base_price: 22000, is_active: true, sort_order: 4 },
    { id: 5, name: '–°–≤–∞–¥–µ–±–Ω—ã–π –ø–∞—Ä', description: '3 —á–∞—Å–∞', duration_hours: 3.0, base_price: 28000, is_active: true, sort_order: 5 },
  ],
  options: [
    { id: 1, name: '–ë—É–∫–µ—Ç —Ü–≤–µ—Ç–æ–≤', price: 3000, is_active: true, sort_order: 1 },
    { id: 2, name: '–§—Ä—É–∫—Ç–æ–≤–∞—è —Ç–∞—Ä–µ–ª–∫–∞ / —Å—ã—Ä–Ω–∞—è —Ç–∞—Ä–µ–ª–∫–∞', price: 2500, is_active: true, sort_order: 2 },
    { id: 3, name: '–§–æ—Ç–æ-—Å—ä–µ–º–∫–∞ (–º–∏–Ω–∏-—Å–µ—Å—Å–∏—è –¥–æ 30 –º–∏–Ω)', price: 5000, is_active: true, sort_order: 3 },
    { id: 4, name: '–ê—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ / —Ä–∏—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–≤—ã', price: 1500, is_active: true, sort_order: 4 },
    { id: 5, name: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ 30 –º–∏–Ω—É—Ç', price: 2000, is_active: true, sort_order: 5 },
  ],
  locations: [
    { id: 1, name: '–ë–∞–Ω—è ‚Ññ1', price_per_hour: 3000, is_active: true, sort_order: 1 },
    { id: 2, name: '–ë–∞–Ω—è ‚Ññ2', price_per_hour: 4000, is_active: true, sort_order: 2 },
    { id: 3, name: '–í—ã–µ–∑–¥ –≤ –¥—Ä—É–≥—É—é –±–∞–Ω—é', price_per_hour: 2000, is_active: true, sort_order: 3 },
  ],
  timeSlots: [
    { id: 1, time_label: '10:00', is_active: true, sort_order: 1 },
    { id: 2, time_label: '13:00', is_active: true, sort_order: 2 },
    { id: 3, time_label: '17:00', is_active: true, sort_order: 3 },
    { id: 4, time_label: '20:00', is_active: true, sort_order: 4 },
  ],
};

const STORAGE_KEY = 'ritual_config';

export function getConfig(): RitualConfig {
  if (typeof window === 'undefined') return mockConfig;
  
  const stored = localStorage.getItem(STORAGE_KEY);
  if (stored) {
    try {
      return JSON.parse(stored);
    } catch {
      return mockConfig;
    }
  }
  
  localStorage.setItem(STORAGE_KEY, JSON.stringify(mockConfig));
  return mockConfig;
}

export function saveConfig(config: RitualConfig): void {
  if (typeof window === 'undefined') return;
  localStorage.setItem(STORAGE_KEY, JSON.stringify(config));
}

export async function createBooking(booking: RitualBooking): Promise<{ bookingId: number; message: string }> {
  const config = getConfig();
  
  const format = config.formats.find(f => f.id === booking.ritualFormatId);
  const location = config.locations.find(l => l.id === booking.locationId);
  const timeSlot = config.timeSlots.find(t => t.id === booking.timeSlotId);
  const options = config.options.filter(o => booking.selectedOptions.includes(o.id));
  
  const optionsText = options.length > 0 ? options.map(o => `  ‚Ä¢ ${o.name}`).join('\n') : '  –ù–µ—Ç';
  
  const telegramMessage = `üî• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∏—Ç—É–∞–ª!

–ò–º—è: ${booking.clientName}
–¢–µ–ª–µ—Ñ–æ–Ω: ${booking.clientPhone}
Email: ${booking.clientEmail}

–†–∏—Ç—É–∞–ª: ${format?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${format?.duration_hours || 0} —á–∞—Å–∞
–õ–æ–∫–∞—Ü–∏—è: ${location?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
–î–∞—Ç–∞: ${booking.selectedDate}
–í—Ä–µ–º—è: ${timeSlot?.time_label || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:
${optionsText}

–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.totalPrice.toLocaleString()} ‚ÇΩ

–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${booking.comment || '–ù–µ—Ç'}`;
  
  const TELEGRAM_BOT_TOKEN = '7877864092:AAFbbgv1YuCBE0wr5m7Ib6vDDuVrjhvICW0';
  const TELEGRAM_CHAT_ID = '-4524074558';
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: telegramMessage,
        parse_mode: 'HTML',
      }),
    });
    
    if (!response.ok) {
      console.error('Telegram API error:', await response.text());
    }
  } catch (error) {
    console.error('Failed to send Telegram notification:', error);
  }
  
  const bookingId = Math.floor(Math.random() * 10000);
  
  if (typeof window !== 'undefined') {
    const bookings = JSON.parse(localStorage.getItem('ritual_bookings') || '[]');
    bookings.push({ ...booking, id: bookingId, createdAt: new Date().toISOString() });
    localStorage.setItem('ritual_bookings', JSON.stringify(bookings));
  }
  
  return {
    bookingId,
    message: '–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∏—Ç—É–∞–ª –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
  };
}